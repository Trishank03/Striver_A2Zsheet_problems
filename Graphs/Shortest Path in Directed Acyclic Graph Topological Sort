class Solution {
  public:
  
  void toposort(vector<vector<pair<int,int>>> &adj,vector<int> &vis,int node,stack<int> &st){
      vis[node] = 1;
      for(auto it:adj[node]){
          int v = it.first;
          if(!vis[v]) toposort(adj,vis,v,st);
      }
      st.push(node);
  }
  
    vector<int> shortestPath(int V, int E, vector<vector<int>>& edges) {
        // code here
        vector<vector<pair<int,int>>> adj(V);  //adjacency matrix
        //creation of adjacency matrix
        for(int i=0;i<E;i++){
            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});
        }
        
        vector<int> vis(V,0);
        stack<int> st;
        for(int i=0;i<V;i++){
            if(!vis[i]){
                toposort(adj,vis,i,st);
            }
        }
        
        vector<int> dist(V,1e9);
        dist[0] = 0;  // src = 0 i.e., dist[src] = 0;
        while(!st.empty()){
            int node = st.top();
            st.pop();
            for(auto it:adj[node]){
                int v = it.first;
                int w = it.second;
                if(dist[node] + w < dist[v]) dist[v] = dist[node] + w;
            }
        }
        
        for(int i=0;i<V;i++){
            if(dist[i]==1e9) dist[i] = -1;
        }
        return dist;
        
        
    }
};
