 ***************************** Approach-1 *********************************************

class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<vector<int>> adj) {
        // Your code here
        int n = adj.size();
        vector<int> indegree(n,0);
        queue<int> q;
        for(int i=0;i<n;i++){
            for(auto it: adj[i]){
                indegree[it]++;
            }
        }
        for(int i=0;i<n;i++){
            if(indegree[i]==0) q.push(i);
        }
        vector<int> ans;
        while(!q.empty()){
            int x = q.front();
            q.pop();
            ans.push_back(x);
            for(auto it : adj[x]){
                indegree[it]--;
                if(indegree[it]==0) q.push(it);
            }
        }
        
        if(ans.size()==n) return false;
        return true;
        
        
    }
};



***************************************  Approach-2 ****************************************
(same as the first one , but here we are not using the extra space 
i.e., ans vector to store the values instead of that we are counting the no of vertices)

class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<vector<int>> adj) {
        // Your code here
        int n = adj.size();
        vector<int> indegree(n,0);
        queue<int> q;
        for(int i=0;i<n;i++){
            for(auto it: adj[i]){
                indegree[it]++;
            }
        }
        for(int i=0;i<n;i++){
            if(indegree[i]==0) q.push(i);
        }
        int cnt = 0;
        while(!q.empty()){
            int x = q.front();
            q.pop();
            cnt++;
            for(auto it : adj[x]){
                indegree[it]--;
                if(indegree[it]==0) q.push(it);
            }
        }
        
        if(cnt==n) return false;
        return true;
        
        
    }
};
