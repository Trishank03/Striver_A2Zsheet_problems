class Solution {
  public:
  
    bool dfs(int node,vector<int> &vis, vector<int> &pathVis,vector<vector<int>> &adj){
        vis[node] = 1;
        pathVis[node] = 1;
        for(auto it: adj[node]){
            if(vis[it]==0) {
                if(dfs(it,vis,pathVis,adj)==true) return true;
            }
            else if(pathVis[it]==1) return true;
        }
        pathVis[node] = 0;
        return false;
    }
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<vector<int>> adj) {
        // code here
        int n = adj.size();
        vector<int> vis(n,0);
        vector<int> pathVis(n,0);
        for(int i=0;i<n;i++){
            if(vis[i]==0){
                if(dfs(i,vis,pathVis,adj) == true) return true;
            }
        }
        return false;
    }
};
