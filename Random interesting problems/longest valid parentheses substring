 *********************************************************** APPROACH - 1 ***************************************************************
// C++ program to find length of the
// longest valid substring

#include <bits/stdc++.h>
using namespace std;

int maxLength(string s) {
    int maxLen = 0;

    // Left to Right Traversal
    int open = 0, close = 0;
    for (char ch : s) {
        if (ch == '(') {
            open++;
        }
        else if (ch == ')') {
            close++;
        }

        if (open == close) {
            maxLen = max(maxLen, 2 * close);
        }
        else if (close > open) {
            open = close = 0;
        }
    }

    // Right to Left Traversal
    open = close = 0;
    for (int i = s.size() - 1; i >= 0; i--) {
        if (s[i] == '(') {
            open++;
        }
        else if (s[i] == ')') {
            close++;
        }

        if (open == close) {
            maxLen = max(maxLen, 2 * open);
        }
        else if (open > close) {
            open = close = 0;
        }
    }

    return maxLen;
}

int main(){
    string s = "()(((())(()";
    cout << maxLength(s) << endl;
    return 0;
}







************************************************ APPROACH - 2 ***********************************************************

// C++ program to find length of the 
// longest valid substring

#include <bits/stdc++.h>
using namespace std;

int maxLength(string s) {
    stack<int> st;

    // Push -1 as the initial index to 
      // handle the edge case
    st.push(-1);
    int maxLen = 0;

    // Traverse the string
    for (int i = 0; i < s.length(); i++) {
        
        // If we encounter an opening parenthesis,
          // push its index
        if (s[i] == '(') {
            st.push(i);
        } else {
            
            // If we encounter a closing parenthesis,
              // pop the stack
            st.pop();

            // If stack is empty, push the current index 
            // as a base for the next valid substring
            if (st.empty()) {
                st.push(i);
            } else {
                
                // Update maxLength with the current length 
                // of the valid parentheses substring
                maxLen = max(maxLen, i - st.top());
            }
        }
    }

    return maxLen;
}

int main() {
  
    string s = "()(((())(()"; 
    cout << maxLength(s) << endl;

    return 0;
}
