                  // Recursion
int climbStairs(int n) {
        if(n<=2) return n;
        return climbStairs(n-1) + climbStairs(n-2);
    }



               // Memoization
class Solution {
public:
    int f(int n,vector<int> &dp){
        if(n<=2)return n;
        if(dp[n]!=-1) return dp[n];
        dp[n] = f(n-1,dp) + f(n-2,dp);
        return dp[n];
    }

    int climbStairs(int n) {
        vector<int> dp(n+1,-1);
        return f(n,dp);
    }
};




               // Tabulation
class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n+2,-1);
        dp[1] = 1;
        dp[2] = 2;
        for(int i=3;i<=n;i++){
            dp[i] = dp[i-1] + dp[i-2];
        } 
        return dp[n];     
    }
};



               // Space optimization
class Solution {
public:
    int climbStairs(int n) {
        int lastprev = 1;
        int firstprev = 1;
        for(int i=2;i<=n;i++){
            int cur = lastprev + firstprev;
            lastprev = firstprev;
            firstprev = cur;
        } 
        return firstprev;        
    }
};
